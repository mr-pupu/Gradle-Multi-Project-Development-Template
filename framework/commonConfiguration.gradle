// It's not necessary to apply java plugin to root projects because
// Spring Boot plugin does it by itself.
//
// @see https://github.com/spring-projects/spring-boot/blob/master/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPlugin.java
apply plugin: 'spring-boot'

ext {
    mainClassName = 'com.github.vkuzel.gradle_multi_project_development_template.framework.core_module.CoreModuleApplication'
}

repositories {
    mavenCentral()
}

// Because of "The standard project dependencies are supported and makes
// relevant projects configured. If project A has a compile dependency on
// project B then building A causes configuration of both projects." we have
// to add Spring Boot plugin and Maven repository to parent project.
//
// @see https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:configuration_on_demand
subprojects {
    // Subprojects must not have applied Spring Boot plugin because it
    // duplicates some tasks. So dependency management to Spring Boot project
    // is extracted here.
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            // Spring Boot version is defined in buildscript block in the root
            // project's build.gradle file.
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }
}

// TODO What is it good for?
sourceCompatibility = 1.8
targetCompatibility = 1.8
